//
// !!! DO NOT EDIT !!!!
//
// This file was auto-generated by: node data/gqlSetup.js
// using the Nunjucks template at data/gqlHelper.js.njk
//      https://mozilla.github.io/nunjucks/
//

import { graphql } from 'react-relay';


/**
 * gql database
 */
const helperSingleton = {
  /**
   * Fetch the initial list of projects and global node counts
   */
  homepageQuery: graphql`query gqlHelperHomepageQuery {
    projectList: project(first: 10000) {
      name: project_id
      code
    }
    count1: _case_count
    count2: _study_count
    count3: _aliquot_count
    
    fileCount1: _aggregated_snp_array_count
    fileCount2: _aligned_reads_count
    fileCount3: _allele_expression_count
    fileCount4: _copy_number_variation_count
    fileCount5: _exon_expression_count
    fileCount6: _gene_expression_count
    fileCount7: _imaging_file_count
    fileCount8: _reference_file_count
    fileCount9: _simple_germline_variation_count
    fileCount10: _snp_array_variation_count
    fileCount11: _submitted_aligned_reads_count
    fileCount12: _submitted_cnv_array_count
    fileCount13: _submitted_snp_array_count
    fileCount14: _submitted_unaligned_reads_count
    fileCount15: _transcript_expression_count
    
  }`,

  projectDetailQuery: graphql`query gqlHelperProjectDetailQuery( $name: [String] ) {
    project( project_id:$name ) {
      name: project_id
      code
    }
    count1: _case_count( project_id:$name )
    count2: _study_count( project_id:$name )
    count3: _aliquot_count( project_id:$name )
    
    chart1: _case_count( project_id:$name )
    chart2: _study_count( project_id:$name )
    
    fileCount1: _aggregated_snp_array_count( project_id:$name )
    fileCount2: _aligned_reads_count( project_id:$name )
    fileCount3: _allele_expression_count( project_id:$name )
    fileCount4: _copy_number_variation_count( project_id:$name )
    fileCount5: _exon_expression_count( project_id:$name )
    fileCount6: _gene_expression_count( project_id:$name )
    fileCount7: _imaging_file_count( project_id:$name )
    fileCount8: _reference_file_count( project_id:$name )
    fileCount9: _simple_germline_variation_count( project_id:$name )
    fileCount10: _snp_array_variation_count( project_id:$name )
    fileCount11: _submitted_aligned_reads_count( project_id:$name )
    fileCount12: _submitted_cnv_array_count( project_id:$name )
    fileCount13: _submitted_snp_array_count( project_id:$name )
    fileCount14: _submitted_unaligned_reads_count( project_id:$name )
    fileCount15: _transcript_expression_count( project_id:$name )
    
  }`,

  explorerPageQuery: graphql`query gqlHelperExplorerPageQuery{
    viewer {
      ...gqlHelperExplorerFragment
    }
  }`,

  explorerPageFragment: graphql`
  fragment gqlHelperExplorerFragment on viewer
  @argumentDefinitions(
    firstValue_aggregated_snp_array: {type: "Int", defaultValue: 100},
    cursor_aggregated_snp_array: {type: "Int"},
    firstValue_aligned_reads: {type: "Int", defaultValue: 100},
    cursor_aligned_reads: {type: "Int"},
    firstValue_allele_expression: {type: "Int", defaultValue: 100},
    cursor_allele_expression: {type: "Int"},
    firstValue_copy_number_variation: {type: "Int", defaultValue: 100},
    cursor_copy_number_variation: {type: "Int"},
    firstValue_exon_expression: {type: "Int", defaultValue: 100},
    cursor_exon_expression: {type: "Int"},
    firstValue_gene_expression: {type: "Int", defaultValue: 100},
    cursor_gene_expression: {type: "Int"},
    firstValue_imaging_file: {type: "Int", defaultValue: 100},
    cursor_imaging_file: {type: "Int"},
    firstValue_reference_file: {type: "Int", defaultValue: 100},
    cursor_reference_file: {type: "Int"},
    firstValue_simple_germline_variation: {type: "Int", defaultValue: 100},
    cursor_simple_germline_variation: {type: "Int"},
    firstValue_snp_array_variation: {type: "Int", defaultValue: 100},
    cursor_snp_array_variation: {type: "Int"},
    firstValue_submitted_aligned_reads: {type: "Int", defaultValue: 100},
    cursor_submitted_aligned_reads: {type: "Int"},
    firstValue_submitted_cnv_array: {type: "Int", defaultValue: 100},
    cursor_submitted_cnv_array: {type: "Int"},
    firstValue_submitted_snp_array: {type: "Int", defaultValue: 100},
    cursor_submitted_snp_array: {type: "Int"},
    firstValue_submitted_unaligned_reads: {type: "Int", defaultValue: 100},
    cursor_submitted_unaligned_reads: {type: "Int"},
    firstValue_transcript_expression: {type: "Int", defaultValue: 100},
    cursor_transcript_expression: {type: "Int"},
    
    selected_projects: {type: "[String]"},
    selected_file_types: {type: "[String]"},
    selected_file_formats: {type: "[String]"}
  )
  {
    
    fileData_aggregated_snp_array: aggregated_snp_array(first: $firstValue_aggregated_snp_array offset: $cursor_aggregated_snp_array,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_aligned_reads: aligned_reads(first: $firstValue_aligned_reads offset: $cursor_aligned_reads,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_allele_expression: allele_expression(first: $firstValue_allele_expression offset: $cursor_allele_expression,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_copy_number_variation: copy_number_variation(first: $firstValue_copy_number_variation offset: $cursor_copy_number_variation,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_exon_expression: exon_expression(first: $firstValue_exon_expression offset: $cursor_exon_expression,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_gene_expression: gene_expression(first: $firstValue_gene_expression offset: $cursor_gene_expression,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_imaging_file: imaging_file(first: $firstValue_imaging_file offset: $cursor_imaging_file,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_reference_file: reference_file(first: $firstValue_reference_file offset: $cursor_reference_file,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_simple_germline_variation: simple_germline_variation(first: $firstValue_simple_germline_variation offset: $cursor_simple_germline_variation,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_snp_array_variation: snp_array_variation(first: $firstValue_snp_array_variation offset: $cursor_snp_array_variation,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_submitted_aligned_reads: submitted_aligned_reads(first: $firstValue_submitted_aligned_reads offset: $cursor_submitted_aligned_reads,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_submitted_cnv_array: submitted_cnv_array(first: $firstValue_submitted_cnv_array offset: $cursor_submitted_cnv_array,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_submitted_snp_array: submitted_snp_array(first: $firstValue_submitted_snp_array offset: $cursor_submitted_snp_array,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_submitted_unaligned_reads: submitted_unaligned_reads(first: $firstValue_submitted_unaligned_reads offset: $cursor_submitted_unaligned_reads,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
    fileData_transcript_expression: transcript_expression(first: $firstValue_transcript_expression offset: $cursor_transcript_expression,
    project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
      project_id
      object_id
      file_name
      data_category
      data_format
      data_type
      file_size
    }
  }
  `,
  explorerRefreshQuery: graphql`
    query gqlHelperExplorerRefreshQuery (
      $firstValue_aggregated_snp_array: Int,
      $cursor_aggregated_snp_array: Int,
      $firstValue_aligned_reads: Int,
      $cursor_aligned_reads: Int,
      $firstValue_allele_expression: Int,
      $cursor_allele_expression: Int,
      $firstValue_copy_number_variation: Int,
      $cursor_copy_number_variation: Int,
      $firstValue_exon_expression: Int,
      $cursor_exon_expression: Int,
      $firstValue_gene_expression: Int,
      $cursor_gene_expression: Int,
      $firstValue_imaging_file: Int,
      $cursor_imaging_file: Int,
      $firstValue_reference_file: Int,
      $cursor_reference_file: Int,
      $firstValue_simple_germline_variation: Int,
      $cursor_simple_germline_variation: Int,
      $firstValue_snp_array_variation: Int,
      $cursor_snp_array_variation: Int,
      $firstValue_submitted_aligned_reads: Int,
      $cursor_submitted_aligned_reads: Int,
      $firstValue_submitted_cnv_array: Int,
      $cursor_submitted_cnv_array: Int,
      $firstValue_submitted_snp_array: Int,
      $cursor_submitted_snp_array: Int,
      $firstValue_submitted_unaligned_reads: Int,
      $cursor_submitted_unaligned_reads: Int,
      $firstValue_transcript_expression: Int,
      $cursor_transcript_expression: Int,
      
      $selected_projects: [String],
      $selected_file_types: [String],
      $selected_file_formats: [String]
    )
    {
      viewer {
        ...gqlHelperExplorerFragment @arguments(
          firstValue_aggregated_snp_array: $firstValue_aggregated_snp_array,
          cursor_aggregated_snp_array: $cursor_aggregated_snp_array,
          firstValue_aligned_reads: $firstValue_aligned_reads,
          cursor_aligned_reads: $cursor_aligned_reads,
          firstValue_allele_expression: $firstValue_allele_expression,
          cursor_allele_expression: $cursor_allele_expression,
          firstValue_copy_number_variation: $firstValue_copy_number_variation,
          cursor_copy_number_variation: $cursor_copy_number_variation,
          firstValue_exon_expression: $firstValue_exon_expression,
          cursor_exon_expression: $cursor_exon_expression,
          firstValue_gene_expression: $firstValue_gene_expression,
          cursor_gene_expression: $cursor_gene_expression,
          firstValue_imaging_file: $firstValue_imaging_file,
          cursor_imaging_file: $cursor_imaging_file,
          firstValue_reference_file: $firstValue_reference_file,
          cursor_reference_file: $cursor_reference_file,
          firstValue_simple_germline_variation: $firstValue_simple_germline_variation,
          cursor_simple_germline_variation: $cursor_simple_germline_variation,
          firstValue_snp_array_variation: $firstValue_snp_array_variation,
          cursor_snp_array_variation: $cursor_snp_array_variation,
          firstValue_submitted_aligned_reads: $firstValue_submitted_aligned_reads,
          cursor_submitted_aligned_reads: $cursor_submitted_aligned_reads,
          firstValue_submitted_cnv_array: $firstValue_submitted_cnv_array,
          cursor_submitted_cnv_array: $cursor_submitted_cnv_array,
          firstValue_submitted_snp_array: $firstValue_submitted_snp_array,
          cursor_submitted_snp_array: $cursor_submitted_snp_array,
          firstValue_submitted_unaligned_reads: $firstValue_submitted_unaligned_reads,
          cursor_submitted_unaligned_reads: $cursor_submitted_unaligned_reads,
          firstValue_transcript_expression: $firstValue_transcript_expression,
          cursor_transcript_expression: $cursor_transcript_expression,
          
          selected_projects: $selected_projects,
          selected_file_types: $selected_file_types,
          selected_file_formats: $selected_file_formats
        )
      }
    }
  `,
  allSubmitterIdsByTypeQuery: graphql`
    query gqlHelperAllSubmitterIdsByTypeQuery( $project_id: [String] ) {
      core_metadata_collection(project_id:$project_id, first:0) {
        submitter_id
      }
    }
  `,
};


//----------------------------------------------

/**
 * App-aware GQLHelper - delegates to the appropriate helper for the given app
 * based on a compile-time transformation. Relay does not like gql that
 * does not conform to the schema supplied to the relay compiler, so to
 * support different dictionaries in the same app we need to be a little
 * bit clever.
 */
export class GQLHelper {
  /**
   * Goofy little utility - scans data for keys matching 'fileCount\d+' or 'fileData\d+',
   * and returns a { fileCount: sum-of-fileCounts, fileData:[] concatenation of data }
   *
   * @param {Object} data
   * @return {fileCount:sum,fileData:Array}
   */
  static extractFileInfo(data) {
    const fileCount = Object.keys(data).filter(key => key.indexOf('fileCount') === 0).map(key => data[key])
      .reduce((acc, it) => acc + it, 0);
    const fileData = Object.keys(data).filter(key => key.indexOf('fileData') === 0).map(key => data[key])
      .reduce(
        (acc, it) => {
          let result = acc;
          if (Array.isArray(it)) {
            result = acc.concat(it);
          } else {
            acc.push(it);
          }
          return result;
        }, []);
    return { fileCount, fileData };
  }

  static extractFileDataToDict(data) {
    return Object.keys(data).filter(key => key.indexOf('fileData') === 0).reduce(
      (acc, key) => {
        acc[key.substr(key.indexOf('_') + 1)] = data[key];
        return acc;
      }, {},
    );
  }

  /**
   * Little singleton factory
   */
  static getGQLHelper() {
    return helperSingleton;
  }

  static getExplorerVariables(selectedFilters, pageSize, cursors) {
    return {
      firstValue_aggregated_snp_array: pageSize,
      cursor_aggregated_snp_array: ('aggregated_snp_array' in cursors) ? cursors.aggregated_snp_array : 0,
      firstValue_aligned_reads: pageSize,
      cursor_aligned_reads: ('aligned_reads' in cursors) ? cursors.aligned_reads : 0,
      firstValue_allele_expression: pageSize,
      cursor_allele_expression: ('allele_expression' in cursors) ? cursors.allele_expression : 0,
      firstValue_copy_number_variation: pageSize,
      cursor_copy_number_variation: ('copy_number_variation' in cursors) ? cursors.copy_number_variation : 0,
      firstValue_exon_expression: pageSize,
      cursor_exon_expression: ('exon_expression' in cursors) ? cursors.exon_expression : 0,
      firstValue_gene_expression: pageSize,
      cursor_gene_expression: ('gene_expression' in cursors) ? cursors.gene_expression : 0,
      firstValue_imaging_file: pageSize,
      cursor_imaging_file: ('imaging_file' in cursors) ? cursors.imaging_file : 0,
      firstValue_reference_file: pageSize,
      cursor_reference_file: ('reference_file' in cursors) ? cursors.reference_file : 0,
      firstValue_simple_germline_variation: pageSize,
      cursor_simple_germline_variation: ('simple_germline_variation' in cursors) ? cursors.simple_germline_variation : 0,
      firstValue_snp_array_variation: pageSize,
      cursor_snp_array_variation: ('snp_array_variation' in cursors) ? cursors.snp_array_variation : 0,
      firstValue_submitted_aligned_reads: pageSize,
      cursor_submitted_aligned_reads: ('submitted_aligned_reads' in cursors) ? cursors.submitted_aligned_reads : 0,
      firstValue_submitted_cnv_array: pageSize,
      cursor_submitted_cnv_array: ('submitted_cnv_array' in cursors) ? cursors.submitted_cnv_array : 0,
      firstValue_submitted_snp_array: pageSize,
      cursor_submitted_snp_array: ('submitted_snp_array' in cursors) ? cursors.submitted_snp_array : 0,
      firstValue_submitted_unaligned_reads: pageSize,
      cursor_submitted_unaligned_reads: ('submitted_unaligned_reads' in cursors) ? cursors.submitted_unaligned_reads : 0,
      firstValue_transcript_expression: pageSize,
      cursor_transcript_expression: ('transcript_expression' in cursors) ? cursors.transcript_expression : 0,
      selected_projects: selectedFilters ? selectedFilters.projects : [],
      selected_file_formats: selectedFilters ? selectedFilters.file_formats : [],
      selected_file_types: selectedFilters ? selectedFilters.file_types : [],
    };
  }

  static getDefaultDictionary(data, cursors) {
    const fileLengthData = Object.keys(data).filter(key => key.indexOf('fileData') === 0).reduce(
      (map, key) => {
        const res = map;
        res[key.substr(key.indexOf('_') + 1)] = data[key].length; return res;
      }, {},
    );
    return Object.keys(fileLengthData).reduce(
      (map, key) => {
        const res = map;
        if (key in cursors) {
          res[key] = cursors[key];
        } else {
          res[key] = 0;
        }
        return res;
      }, {},
    );
  }

  static updateOffset(data, cursors) {
    const fileLengthData = Object.keys(data).filter(key => key.indexOf('fileData') === 0).reduce(
      (map, key) => {
        const res = map;
        res[key.substr(key.indexOf('_') + 1)] = data[key].length; return res;
      }, {},
    );
    return Object.keys(fileLengthData).reduce(
      (map, key) => {
        const res = map;
        if (key in cursors) {
          res[key] = cursors[key] + fileLengthData[key];
        } else {
          res[key] = fileLengthData[key];
        }
        return res;
      }, {},
    );
  }
}

